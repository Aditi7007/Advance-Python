{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"kZnEW6froSNM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744086604512,"user_tz":-330,"elapsed":20456,"user":{"displayName":"ADITI SINGH","userId":"15686955306504732234"}},"outputId":"0b8b6d75-4560-45c1-b637-5b710da30e98"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import Model,Sequential\n","from tensorflow.keras.layers import Dense,Input,Dropout"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":383},"id":"LW79uX0upDSi","executionInfo":{"status":"error","timestamp":1744086912458,"user_tz":-330,"elapsed":102,"user":{"displayName":"ADITI SINGH","userId":"15686955306504732234"}},"outputId":"42d396a1-cdd8-455b-c5a2-adb5ab1a09a7"},"execution_count":5,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"cannot import name 'Model' from 'sklearn.metrics' (/usr/local/lib/python3.11/dist-packages/sklearn/metrics/__init__.py)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-3120a6cc91e5>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensemble\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mSequential\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mInput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mDropout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'Model' from 'sklearn.metrics' (/usr/local/lib/python3.11/dist-packages/sklearn/metrics/__init__.py)","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["import pandas as pd\n","data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Datasets/pokemon.csv')\n","print(data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UVJX0dv8rwdr","executionInfo":{"status":"ok","timestamp":1744087055156,"user_tz":-330,"elapsed":211,"user":{"displayName":"ADITI SINGH","userId":"15686955306504732234"}},"outputId":"414d3939-d40c-4888-d0c4-58dbf01807f3"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["   #                   Name Type 1  Type 2  Total  HP  Attack  Defense  \\\n","0  1              Bulbasaur  Grass  Poison    318  45      49       49   \n","1  2                Ivysaur  Grass  Poison    405  60      62       63   \n","2  3               Venusaur  Grass  Poison    525  80      82       83   \n","3  3  VenusaurMega Venusaur  Grass  Poison    625  80     100      123   \n","4  4             Charmander   Fire     NaN    309  39      52       43   \n","\n","   Sp. Atk  Sp. Def  Speed  Generation  Legendary  \n","0       65       65     45           1      False  \n","1       80       80     60           1      False  \n","2      100      100     80           1      False  \n","3      122      120     80           1      False  \n","4       60       50     65           1      False  \n"]}]},{"cell_type":"code","source":["data['Legendary'].value_counts(normalize=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"3rsShI1Yqyly","executionInfo":{"status":"ok","timestamp":1744087058215,"user_tz":-330,"elapsed":43,"user":{"displayName":"ADITI SINGH","userId":"15686955306504732234"}},"outputId":"270bf264-9369-4c21-a791-42251d18c44f"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Legendary\n","False    0.91875\n","True     0.08125\n","Name: proportion, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>proportion</th>\n","    </tr>\n","    <tr>\n","      <th>Legendary</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>False</th>\n","      <td>0.91875</td>\n","    </tr>\n","    <tr>\n","      <th>True</th>\n","      <td>0.08125</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["data['Type 2'].fillna('missing',inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-zZ1T43RsKeR","executionInfo":{"status":"ok","timestamp":1744087168303,"user_tz":-330,"elapsed":47,"user":{"displayName":"ADITI SINGH","userId":"15686955306504732234"}},"outputId":"292b9a54-23d1-4f88-a078-23d0f3fdbdb4"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-9-e9f274b222d1>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data['Type 2'].fillna('missing',inplace=True)\n"]}]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":492},"id":"OxQArTG4skfk","executionInfo":{"status":"ok","timestamp":1744087199269,"user_tz":-330,"elapsed":54,"user":{"displayName":"ADITI SINGH","userId":"15686955306504732234"}},"outputId":"b364dda5-c260-401d-db1c-4d1d70cccefd"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["#             0\n","Name          0\n","Type 1        0\n","Type 2        0\n","Total         0\n","HP            0\n","Attack        0\n","Defense       0\n","Sp. Atk       0\n","Sp. Def       0\n","Speed         0\n","Generation    0\n","Legendary     0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>#</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Type 1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Type 2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Total</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>HP</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Attack</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Defense</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sp. Atk</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sp. Def</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Speed</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Generation</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Legendary</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["data1=data.copy()"],"metadata":{"id":"czyB0qjxssNb","executionInfo":{"status":"ok","timestamp":1744087303515,"user_tz":-330,"elapsed":41,"user":{"displayName":"ADITI SINGH","userId":"15686955306504732234"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["dummy_data=pd.get"],"metadata":{"id":"rKCh3fkCtFi7"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1744086071549}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}